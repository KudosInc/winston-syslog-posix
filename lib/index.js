var SyslogPosix, exports, posix, util, winston;

posix = require('posix');

util = require('util');

winston = require('winston');

SyslogPosix = winston.transports.SyslogPosix = function(options) {
  if (options == null) {
    options = {};
  }
  this.name = 'SyslogPosix';
  this.level = options.level || 'debug';
  this.identity = options.identity || process.title;
  this.facility = options.facility || 'local0';
  this.unmapped = options.unmapped || 'info';
  return this.showPid = options.showPid === void 0 ? true : options.showPid;
};

util.inherits(SyslogPosix, winston.Transport);

SyslogPosix.prototype.log = function(level, msg, meta, callback) {
  var maxLength, message, messages, prepend, syslogOptions, syslogSeverity;
  if (this.silent) {
    return callback(null, true);
  }
  syslogSeverity = level;
  if (level === 'trace' || level === 'debug') {
    syslogSeverity = 'debug';
  } else if (level === 'notice') {
    syslogSeverity = 'notice';
  } else if (level === 'warn' || level === 'warning') {
    syslogSeverity = 'warning';
  } else if (level === 'error') {
    syslogSeverity = 'err';
  } else if (level === 'crit' || level === 'critical') {
    syslogSeverity = 'crit';
  } else if (level === 'alert') {
    syslogSeverity = 'alert';
  } else if (level === 'fatal' || level === 'emerg') {
    syslogSeverity = 'emerg';
  } else {
    syslogSeverity = this.unmapped;
  }
  message = msg;
  prepend = '[' + level + '] ';
  if (typeof meta === 'string') {
    message += ' ' + meta;
  } else if (meta && typeof meta === 'object' && Object.keys(meta).length > 0) {
    message += ' ' + util.inspect(meta, false, null, false);
  }
  message = message.replace(/\u001b\[(\d+(;\d+)*)?m/g, '');
  messages = [];
  maxLength = 1024 - prepend.length;
  while (message.length > maxLength) {
    messages.push(prepend + message.substring(0, maxLength));
    message = message.substring(maxLength);
  }
  messages.push(prepend + message);
  syslogOptions = {
    cons: true,
    pid: this.showPid
  };
  posix.openlog(this.identity, syslogOptions, this.facility);
  messages.forEach(function(message) {
    return posix.syslog(syslogSeverity, message);
  });
  posix.closelog();
  this.emit('logged');
  return callback(null, true);
};

module.exports = exports = SyslogPosix;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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R0FBVSxPQUFPLENBQUMsU0FBUixDQUFrQixTQUFsQjtFQUZaO0VBR0EsUUFBUSxDQUFDLElBQVQsQ0FBYyxPQUFBLEdBQVUsT0FBeEI7RUFDQSxhQUFBLEdBQ0U7SUFBQSxJQUFBLEVBQU0sSUFBTjtJQUNBLEdBQUEsRUFBSyxJQUFDLENBQUEsT0FETjs7RUFFRixLQUFLLENBQUMsT0FBTixDQUFjLElBQUMsQ0FBQSxRQUFmLEVBQXlCLGFBQXpCLEVBQXdDLElBQUMsQ0FBQSxRQUF6QztFQUNBLFFBQVEsQ0FBQyxPQUFULENBQWlCLFNBQUMsT0FBRDtXQUNmLEtBQUssQ0FBQyxNQUFOLENBQWEsY0FBYixFQUE2QixPQUE3QjtFQURlLENBQWpCO0VBRUEsS0FBSyxDQUFDLFFBQU4sQ0FBQTtFQUNBLElBQUMsQ0FBQSxJQUFELENBQU0sUUFBTjtTQUNBLFFBQUEsQ0FBUyxJQUFULEVBQWUsSUFBZjtBQTlDaUI7O0FBZ0RuQixNQUFNLENBQUMsT0FBUCxHQUFpQixPQUFBLEdBQVUiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJwb3NpeCA9IHJlcXVpcmUgJ3Bvc2l4J1xudXRpbCA9IHJlcXVpcmUgJ3V0aWwnXG53aW5zdG9uID0gcmVxdWlyZSAnd2luc3RvbidcblxuU3lzbG9nUG9zaXggPSB3aW5zdG9uLnRyYW5zcG9ydHMuU3lzbG9nUG9zaXggPSAob3B0aW9ucyA9IHt9KSAtPlxuICBAbmFtZSA9ICdTeXNsb2dQb3NpeCdcbiAgQGxldmVsID0gb3B0aW9ucy5sZXZlbCBvciAnZGVidWcnXG4gIEBpZGVudGl0eSA9IG9wdGlvbnMuaWRlbnRpdHkgb3IgcHJvY2Vzcy50aXRsZVxuICBAZmFjaWxpdHkgPSBvcHRpb25zLmZhY2lsaXR5IG9yICdsb2NhbDAnXG4gIEB1bm1hcHBlZCA9IG9wdGlvbnMudW5tYXBwZWQgb3IgJ2luZm8nXG4gIEBzaG93UGlkID0gaWYgb3B0aW9ucy5zaG93UGlkID09IHVuZGVmaW5lZCB0aGVuIHRydWUgZWxzZSBvcHRpb25zLnNob3dQaWRcblxuI1xuIyBJbmhlcml0IGZyb20gYHdpbnN0b24uVHJhbnNwb3J0YCBzbyB5b3UgY2FuIHRha2UgYWR2YW50YWdlXG4jIG9mIHRoZSBiYXNlIGZ1bmN0aW9uYWxpdHkgYW5kIGAuaGFuZGxlRXhjZXB0aW9ucygpYC5cbiNcbnV0aWwuaW5oZXJpdHMgU3lzbG9nUG9zaXgsIHdpbnN0b24uVHJhbnNwb3J0XG5cblN5c2xvZ1Bvc2l4Ojpsb2cgPSAobGV2ZWwsIG1zZywgbWV0YSwgY2FsbGJhY2spIC0+XG4gIGlmIEBzaWxlbnRcbiAgICByZXR1cm4gY2FsbGJhY2sgbnVsbCwgdHJ1ZVxuXG4gICMgbWFwIGNvbW1vbiBkZWJ1ZyBsZXZlbHMgdG8gdmFsaWQgcG9zaXggc3lzbG9nIHZhbHVlc1xuICBzeXNsb2dTZXZlcml0eSA9IGxldmVsXG4gIGlmIGxldmVsID09ICd0cmFjZScgb3IgbGV2ZWwgPT0gJ2RlYnVnJ1xuICAgIHN5c2xvZ1NldmVyaXR5ID0gJ2RlYnVnJ1xuICBlbHNlIGlmIGxldmVsID09ICdub3RpY2UnXG4gICAgc3lzbG9nU2V2ZXJpdHkgPSAnbm90aWNlJ1xuICBlbHNlIGlmIGxldmVsID09ICd3YXJuJyBvciBsZXZlbCA9PSAnd2FybmluZydcbiAgICBzeXNsb2dTZXZlcml0eSA9ICd3YXJuaW5nJ1xuICBlbHNlIGlmIGxldmVsID09ICdlcnJvcidcbiAgICBzeXNsb2dTZXZlcml0eSA9ICdlcnInXG4gIGVsc2UgaWYgbGV2ZWwgPT0gJ2NyaXQnIG9yIGxldmVsID09ICdjcml0aWNhbCdcbiAgICBzeXNsb2dTZXZlcml0eSA9ICdjcml0J1xuICBlbHNlIGlmIGxldmVsID09ICdhbGVydCdcbiAgICBzeXNsb2dTZXZlcml0eSA9ICdhbGVydCdcbiAgZWxzZSBpZiBsZXZlbCA9PSAnZmF0YWwnIG9yIGxldmVsID09ICdlbWVyZydcbiAgICBzeXNsb2dTZXZlcml0eSA9ICdlbWVyZydcbiAgZWxzZVxuICAgIHN5c2xvZ1NldmVyaXR5ID0gQHVubWFwcGVkXG5cbiAgbWVzc2FnZSA9IG1zZ1xuICBwcmVwZW5kID0gJ1snICsgbGV2ZWwgKyAnXSAnXG4gIGlmIHR5cGVvZiBtZXRhID09ICdzdHJpbmcnXG4gICAgbWVzc2FnZSArPSAnICcgKyBtZXRhXG4gIGVsc2UgaWYgbWV0YSBhbmQgdHlwZW9mIG1ldGEgPT0gJ29iamVjdCcgYW5kIE9iamVjdC5rZXlzKG1ldGEpLmxlbmd0aCA+IDBcbiAgICBtZXNzYWdlICs9ICcgJyArIHV0aWwuaW5zcGVjdChtZXRhLCBmYWxzZSwgbnVsbCwgZmFsc2UpXG4gIG1lc3NhZ2UgPSBtZXNzYWdlLnJlcGxhY2UoL1xcdTAwMWJcXFsoXFxkKyg7XFxkKykqKT9tL2csICcnKVxuXG4gICMgdHJ1bmNhdGUgbWVzc2FnZSB0byBhIG1heCBvZiAxMDI0IGJ5dGVzXG4gIG1lc3NhZ2VzID0gW11cbiAgbWF4TGVuZ3RoID0gMTAyNCAtIHByZXBlbmQubGVuZ3RoXG4gIHdoaWxlIG1lc3NhZ2UubGVuZ3RoID4gbWF4TGVuZ3RoXG4gICAgbWVzc2FnZXMucHVzaCBwcmVwZW5kICsgbWVzc2FnZS5zdWJzdHJpbmcoMCwgbWF4TGVuZ3RoKVxuICAgIG1lc3NhZ2UgPSBtZXNzYWdlLnN1YnN0cmluZyhtYXhMZW5ndGgpXG4gIG1lc3NhZ2VzLnB1c2ggcHJlcGVuZCArIG1lc3NhZ2VcbiAgc3lzbG9nT3B0aW9ucyA9XG4gICAgY29uczogdHJ1ZVxuICAgIHBpZDogQHNob3dQaWRcbiAgcG9zaXgub3BlbmxvZyBAaWRlbnRpdHksIHN5c2xvZ09wdGlvbnMsIEBmYWNpbGl0eVxuICBtZXNzYWdlcy5mb3JFYWNoIChtZXNzYWdlKSAtPlxuICAgIHBvc2l4LnN5c2xvZyBzeXNsb2dTZXZlcml0eSwgbWVzc2FnZVxuICBwb3NpeC5jbG9zZWxvZygpXG4gIEBlbWl0ICdsb2dnZWQnXG4gIGNhbGxiYWNrIG51bGwsIHRydWVcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gU3lzbG9nUG9zaXhcbiJdfQ==
