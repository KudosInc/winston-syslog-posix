var SyslogPosix, exports, posix, util, winston;

posix = require('posix');

util = require('util');

winston = require('winston');

SyslogPosix = winston.transports.SyslogPosix = function(options) {
  if (options == null) {
    options = {};
  }
  this.name = 'SyslogPosix';
  this.level = options.level || 'debug';
  this.identity = options.identity || process.title;
  this.facility = options.facility || 'local0';
  return this.showPid = options.showPid === void 0 ? true : options.showPid;
};

util.inherits(SyslogPosix, winston.Transport);

SyslogPosix.prototype.log = function(level, msg, meta, callback) {
  var maxLength, message, messages, prepend, syslogOptions, syslogSeverity;
  if (this.silent) {
    return callback(null, true);
  }
  syslogSeverity = level;
  if (level === 'trace') {
    syslogSeverity = 'debug';
  } else if (level === 'warn') {
    syslogSeverity = 'warning';
  } else if (level === 'error') {
    syslogSeverity = 'err';
  } else if (level === 'fatal') {
    syslogSeverity = 'emerg';
  } else {
    syslogSeverity = 'info';
  }
  message = msg;
  prepend = '[' + level + '] ';
  if (typeof meta === 'string') {
    message += ' ' + meta;
  } else if (meta && typeof meta === 'object' && Object.keys(meta).length > 0) {
    message += ' ' + util.inspect(meta, false, null, false);
  }
  message = message.replace(/\u001b\[(\d+(;\d+)*)?m/g, '');
  messages = [];
  maxLength = 1024 - prepend.length;
  while (message.length > maxLength) {
    messages.push(prepend + message.substring(0, maxLength));
    message = message.substring(maxLength);
  }
  messages.push(prepend + message);
  syslogOptions = {
    cons: true,
    pid: this.showPid
  };
  posix.openlog(this.identity, syslogOptions, this.facility);
  messages.forEach(function(message) {
    return posix.syslog(syslogSeverity, message);
  });
  posix.closelog();
  this.emit('logged');
  return callback(null, true);
};

module.exports = exports = SyslogPosix;

//# sourceMappingURL=data:application/json;base64,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QUFULENBQWMsT0FBQSxHQUFVLE9BQU8sQ0FBQyxTQUFSLENBQWtCLENBQWxCLEVBQXFCLFNBQXJCLENBQXhCLENBQUEsQ0FBQTtBQUFBLElBQ0EsT0FBQSxHQUFVLE9BQU8sQ0FBQyxTQUFSLENBQWtCLFNBQWxCLENBRFYsQ0FERjtFQUFBLENBM0JBO0FBQUEsRUE4QkEsUUFBUSxDQUFDLElBQVQsQ0FBYyxPQUFBLEdBQVUsT0FBeEIsQ0E5QkEsQ0FBQTtBQUFBLEVBK0JBLGFBQUEsR0FDRTtBQUFBLElBQUEsSUFBQSxFQUFNLElBQU47QUFBQSxJQUNBLEdBQUEsRUFBSyxJQUFDLENBQUEsT0FETjtHQWhDRixDQUFBO0FBQUEsRUFrQ0EsS0FBSyxDQUFDLE9BQU4sQ0FBYyxJQUFDLENBQUEsUUFBZixFQUF5QixhQUF6QixFQUF3QyxJQUFDLENBQUEsUUFBekMsQ0FsQ0EsQ0FBQTtBQUFBLEVBbUNBLFFBQVEsQ0FBQyxPQUFULENBQWlCLFNBQUMsT0FBRCxHQUFBO1dBQ2YsS0FBSyxDQUFDLE1BQU4sQ0FBYSxjQUFiLEVBQTZCLE9BQTdCLEVBRGU7RUFBQSxDQUFqQixDQW5DQSxDQUFBO0FBQUEsRUFxQ0EsS0FBSyxDQUFDLFFBQU4sQ0FBQSxDQXJDQSxDQUFBO0FBQUEsRUFzQ0EsSUFBQyxDQUFBLElBQUQsQ0FBTSxRQUFOLENBdENBLENBQUE7U0F1Q0EsUUFBQSxDQUFTLElBQVQsRUFBZSxJQUFmLEVBeENpQjtBQUFBLENBakJuQixDQUFBOztBQUFBLE1BMkRNLENBQUMsT0FBUCxHQUFpQixPQUFBLEdBQVUsV0EzRDNCLENBQUEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJwb3NpeCA9IHJlcXVpcmUgJ3Bvc2l4J1xudXRpbCA9IHJlcXVpcmUgJ3V0aWwnXG53aW5zdG9uID0gcmVxdWlyZSAnd2luc3RvbidcblxuU3lzbG9nUG9zaXggPSB3aW5zdG9uLnRyYW5zcG9ydHMuU3lzbG9nUG9zaXggPSAob3B0aW9ucyA9IHt9KSAtPlxuICBAbmFtZSA9ICdTeXNsb2dQb3NpeCdcbiAgQGxldmVsID0gb3B0aW9ucy5sZXZlbCBvciAnZGVidWcnXG4gIEBpZGVudGl0eSA9IG9wdGlvbnMuaWRlbnRpdHkgb3IgcHJvY2Vzcy50aXRsZVxuICBAZmFjaWxpdHkgPSBvcHRpb25zLmZhY2lsaXR5IG9yICdsb2NhbDAnXG4gIEBzaG93UGlkID0gaWYgb3B0aW9ucy5zaG93UGlkID09IHVuZGVmaW5lZCB0aGVuIHRydWUgZWxzZSBvcHRpb25zLnNob3dQaWRcblxuI1xuIyBJbmhlcml0IGZyb20gYHdpbnN0b24uVHJhbnNwb3J0YCBzbyB5b3UgY2FuIHRha2UgYWR2YW50YWdlXG4jIG9mIHRoZSBiYXNlIGZ1bmN0aW9uYWxpdHkgYW5kIGAuaGFuZGxlRXhjZXB0aW9ucygpYC5cbiNcbnV0aWwuaW5oZXJpdHMgU3lzbG9nUG9zaXgsIHdpbnN0b24uVHJhbnNwb3J0XG5cblN5c2xvZ1Bvc2l4Ojpsb2cgPSAobGV2ZWwsIG1zZywgbWV0YSwgY2FsbGJhY2spIC0+XG4gIGlmIEBzaWxlbnRcbiAgICByZXR1cm4gY2FsbGJhY2sgbnVsbCwgdHJ1ZVxuXG4gICMgbWFwIGNvbW1vbiBkZWJ1ZyBsZXZlbHMgdG8gdmFsaWQgcG9zaXggc3lzbG9nIHZhbHVlc1xuICBzeXNsb2dTZXZlcml0eSA9IGxldmVsXG4gIGlmIGxldmVsID09ICd0cmFjZSdcbiAgICBzeXNsb2dTZXZlcml0eSA9ICdkZWJ1ZydcbiAgZWxzZSBpZiBsZXZlbCA9PSAnd2FybidcbiAgICBzeXNsb2dTZXZlcml0eSA9ICd3YXJuaW5nJ1xuICBlbHNlIGlmIGxldmVsID09ICdlcnJvcidcbiAgICBzeXNsb2dTZXZlcml0eSA9ICdlcnInXG4gIGVsc2UgaWYgbGV2ZWwgPT0gJ2ZhdGFsJ1xuICAgIHN5c2xvZ1NldmVyaXR5ID0gJ2VtZXJnJ1xuICBlbHNlXG4gICAgc3lzbG9nU2V2ZXJpdHkgPSAnaW5mbydcblxuICBtZXNzYWdlID0gbXNnXG4gIHByZXBlbmQgPSAnWycgKyBsZXZlbCArICddICdcbiAgaWYgdHlwZW9mIG1ldGEgPT0gJ3N0cmluZydcbiAgICBtZXNzYWdlICs9ICcgJyArIG1ldGFcbiAgZWxzZSBpZiBtZXRhIGFuZCB0eXBlb2YgbWV0YSA9PSAnb2JqZWN0JyBhbmQgT2JqZWN0LmtleXMobWV0YSkubGVuZ3RoID4gMFxuICAgIG1lc3NhZ2UgKz0gJyAnICsgdXRpbC5pbnNwZWN0KG1ldGEsIGZhbHNlLCBudWxsLCBmYWxzZSlcbiAgbWVzc2FnZSA9IG1lc3NhZ2UucmVwbGFjZSgvXFx1MDAxYlxcWyhcXGQrKDtcXGQrKSopP20vZywgJycpXG5cbiAgIyB0cnVuY2F0ZSBtZXNzYWdlIHRvIGEgbWF4IG9mIDEwMjQgYnl0ZXNcbiAgbWVzc2FnZXMgPSBbXVxuICBtYXhMZW5ndGggPSAxMDI0IC0gcHJlcGVuZC5sZW5ndGhcbiAgd2hpbGUgbWVzc2FnZS5sZW5ndGggPiBtYXhMZW5ndGhcbiAgICBtZXNzYWdlcy5wdXNoIHByZXBlbmQgKyBtZXNzYWdlLnN1YnN0cmluZygwLCBtYXhMZW5ndGgpXG4gICAgbWVzc2FnZSA9IG1lc3NhZ2Uuc3Vic3RyaW5nKG1heExlbmd0aClcbiAgbWVzc2FnZXMucHVzaCBwcmVwZW5kICsgbWVzc2FnZVxuICBzeXNsb2dPcHRpb25zID1cbiAgICBjb25zOiB0cnVlXG4gICAgcGlkOiBAc2hvd1BpZFxuICBwb3NpeC5vcGVubG9nIEBpZGVudGl0eSwgc3lzbG9nT3B0aW9ucywgQGZhY2lsaXR5XG4gIG1lc3NhZ2VzLmZvckVhY2ggKG1lc3NhZ2UpIC0+XG4gICAgcG9zaXguc3lzbG9nIHN5c2xvZ1NldmVyaXR5LCBtZXNzYWdlXG4gIHBvc2l4LmNsb3NlbG9nKClcbiAgQGVtaXQgJ2xvZ2dlZCdcbiAgY2FsbGJhY2sgbnVsbCwgdHJ1ZVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBTeXNsb2dQb3NpeFxuIl19